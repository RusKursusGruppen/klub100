{"version":3,"sources":["components/Header.js","components/Description.js","components/Album.js","components/Albums.js","components/Player.js","App.js","serviceWorker.js","index.js"],"names":["Header","Component","Description","CoverImg","styled","div","Album","style","height","src","this","props","trip","logo","name","year","AlbumContainer","YearSelect","button","Albums","setYear","bind","state","currentYear","undefined","allYears","Set","trips","map","setState","textAlign","onClick","sort","trip1","trip2","filter","setSong","link","Player","width","scrolling","frameborder","allow","App","song","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wzCAEqBA,E,iLAEjB,OAAO,0D,GAFyBC,aCAfC,E,iLAEjB,OACE,sJ,GAHmCD,a,uOCCzC,IAAME,EAAWC,IAAOC,IAAV,KAWOC,E,iLAEjB,OACE,kBAACH,EAAD,KACE,yBAAKI,MAAO,CAAEC,OAAQ,OAASC,IAAKC,KAAKC,MAAMC,KAAKC,OACpD,4BACGH,KAAKC,MAAMC,KAAKE,KADnB,MAC4BJ,KAAKC,MAAMC,KAAKG,W,GANjBd,a,2PCTnC,IAAMe,EAAiBZ,IAAOC,IAAV,KAMdY,EAAab,IAAOc,OAAV,KAKKC,E,YACnB,WAAYR,GAAQ,IAAD,8BACjB,4CAAMA,KACDS,QAAU,EAAKA,QAAQC,KAAb,gBACf,EAAKC,MAAQ,CACXC,iBAAaC,EACbC,SAAS,YAAK,IAAIC,IAAIC,EAAMC,KAAI,SAAAhB,GAAI,OAAIA,EAAKG,WAL9B,E,qEASXA,GACNL,KAAKmB,SAAS,CAAEN,YAAaR,M,+BAGrB,IAAD,OACP,OACE,6BACE,yBAAKR,MAAO,CAAEuB,UAAW,WACvB,kBAACb,EAAD,CAAYc,QAAS,kBAAM,EAAKX,aAAQI,KAAxC,cAGCd,KAAKY,MAAMG,SAASG,KAAI,SAAAb,GAAI,OAC3B,kBAACE,EAAD,CAAYc,QAAS,kBAAM,EAAKX,QAAQL,KAAQA,MAC9C,KAEN,kBAACC,EAAD,KACGW,EACEK,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMlB,KAAOmB,EAAMnB,QAC1CoB,QAAO,SAAAvB,GAAI,YACiBY,IAA3B,EAAKF,MAAMC,aAEPX,EAAKG,OAAS,EAAKO,MAAMC,eAE9BK,KAAI,SAAAhB,GAAI,OACP,yBAAKmB,QAAS,kBAAM,EAAKpB,MAAMyB,QAAQxB,EAAKyB,QAC1C,kBAAC,EAAD,CAAOzB,KAAMA,c,GAnCOX,aCbfqC,E,iLAEjB,OACE,4BACEC,MAAM,OACN/B,OAAO,MACPgC,UAAU,KACVC,YAAY,KACZC,MAAM,WACNjC,IAAG,+CAA0CC,KAAKC,MAAM0B,KAArD,sC,GATyBpC,aCGf0C,E,YACnB,WAAYhC,GAAQ,IAAD,8BACjB,4CAAMA,KACDyB,QAAU,EAAKA,QAAQf,KAAb,gBACf,EAAKC,MAAQ,CAAEsB,UAAMpB,GAHJ,E,qEAKXoB,GACNlC,KAAKmB,SAAS,CAAEe,KAAMA,M,+BAGtB,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,WACqBrB,IAApBd,KAAKY,MAAMsB,KAAqB,GAAK,kBAAC,EAAD,CAAQP,KAAM3B,KAAKY,MAAMsB,OAC/D,kBAAC,EAAD,CAAQR,QAAS1B,KAAK0B,e,GAfGnC,aCMb6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3df53cb1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class Header extends Component {\n  render() {\n    return <h1>Velkommen til klubben!</h1>;\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class Description extends Component {\n  render() {\n    return (\n      <p>\n        Siden er en samling over Klub100 der er lavet i RKG gennem tiden. Tryk\n        på en rustur for at høre dens klub100.\n      </p>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\n\nconst CoverImg = styled.div`\n  flex-grow: 1;\n  height: 256px;\n  width: 256px;\n  padding: 5px;\n  text-align: center;\n  &:hover {\n    border: 1px solid red;\n  }\n`;\n\nexport default class Album extends Component {\n  render() {\n    return (\n      <CoverImg>\n        <img style={{ height: \"70%\" }} src={this.props.trip.logo} />\n        <h2>\n          {this.props.trip.name} : {this.props.trip.year}\n        </h2>\n      </CoverImg>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport Album from \"./Album.js\";\nimport trips from \"../trips.json\";\n\nconst AlbumContainer = styled.div`\n  border: 1px solid black;\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst YearSelect = styled.button`\n  height: 2em;\n  font-size: 2em;\n`;\n\nexport default class Albums extends Component {\n  constructor(props) {\n    super(props);\n    this.setYear = this.setYear.bind(this);\n    this.state = {\n      currentYear: undefined,\n      allYears: [...new Set(trips.map(trip => trip.year))]\n    };\n  }\n\n  setYear(year) {\n    this.setState({ currentYear: year });\n  }\n\n  render() {\n    return (\n      <div>\n        <div style={{ textAlign: \"center\" }}>\n          <YearSelect onClick={() => this.setYear(undefined)}>\n            Alle år\n          </YearSelect>\n          {this.state.allYears.map(year => (\n            <YearSelect onClick={() => this.setYear(year)}>{year}</YearSelect>\n          ))}{\" \"}\n        </div>\n        <AlbumContainer>\n          {trips\n            .sort((trip1, trip2) => trip1.year < trip2.year)\n            .filter(trip =>\n              this.state.currentYear === undefined\n                ? true\n                : trip.year === this.state.currentYear\n            )\n            .map(trip => (\n              <div onClick={() => this.props.setSong(trip.link)}>\n                <Album trip={trip} />\n              </div>\n            ))}\n        </AlbumContainer>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\n\nexport default class Player extends Component {\n  render() {\n    return (\n      <iframe\n        width=\"100%\"\n        height=\"300\"\n        scrolling=\"no\"\n        frameborder=\"no\"\n        allow=\"autoplay\"\n        src={`https://w.soundcloud.com/player/?url=${this.props.link}&color=%23ff5500&visual=true`}\n      ></iframe>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Header from \"./components/Header.js\";\nimport Description from \"./components/Description.js\";\nimport Albums from \"./components/Albums.js\";\nimport Player from \"./components/Player.js\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.setSong = this.setSong.bind(this);\n    this.state = { song: undefined };\n  }\n  setSong(song) {\n    this.setState({ song: song });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Description />\n        {this.state.song === undefined ? \"\" : <Player link={this.state.song} />}\n        <Albums setSong={this.setSong} />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}